{"name":"ImageJ Morphology Plugins","body":"# Mathematical Morphology plugins for ImageJ\r\n\r\n### Download JAR file: [Morphology_.jar](https://github.com/downloads/ajdecon/imagej_morphology/Morphology_.jar)\r\n\r\n## Summary: \r\nA set of plugins for the popular image processing program\r\nImageJ to implement morphological processing operations \r\nusing a custom structuring element. Most of the logic\r\nis implemented in the org.ajdecon.morphology package\r\nincluded here; top-level .java files are the plugin \r\nuser interfaces.\r\n\r\n## Simple build instructions:\r\n1. Make sure that the ImageJ package (ij.jar) is in the\r\ncurrent directory, or modify the makefile.\r\n2. To compile: make\r\n3. To produce plugin .jar file: jar cvf Morphology_.jar ./*\r\n\r\n## Installation:\r\n1. Install ImageJ. (Latest version found at \r\nhttp://rsbweb.nih.gov/ij/)\r\n2. Copy Morphology_.jar into the plugins directory of \r\nImageJ.\r\n\r\n## Usage:\r\n1. Open a binary or grayscale image in ImageJ.\r\n2. Open the Plugins>Morphology menu and select New \r\nStructuring Element. This will produce a simple image \r\nsuch as a square, circle, or line which will be used to \r\noperate on the image.\r\n3. Open thr Plugins>Morphology menu and select another \r\noperation such as Erode. Select the object image and \r\nstructuring element in the dialog which comes up. This \r\nwill perform the given morphological operation on the \r\nobject image.\r\n\r\n## Detail:\r\nMathematical morphology is a technique for processing \r\ngeometrical structures, particularly in images. It \r\ngenerally makes use of a simple shape called a structuring\r\nelement, which is then superimposed with its center over \r\neach pixel of an object image (the \"target\" pixel). \r\nDepending on the values of the object pixels corresponding \r\nto the shape of the structuring element, the value of the\r\ntarget pixel may be changed. These techniques have \r\napplications in various types of object recognition and\r\nsegmentation.\r\n\r\nA simple example of a morphological operation is erosion \r\nin a binary image.  For each pixel, examine the values of\r\nthe pixels in the neighborhood defined by the structuring\r\nelement. If they are all foreground pixels, the target \r\nbecomes a foreground pixel; otherwise, it becomes a \r\nbackground pixel. This has the effect of eroding the \r\nedges of large structures with a bias defined by the \r\nshape of the structuring element.\r\n\r\n(see http://en.wikipedia.org/wiki/Mathematical_morphology\r\nfor more information)\r\n\r\nMy research over the past few years has produced large \r\namounts of data in the form of microscopy images. \r\nAnalyzing this data has required, among other things, the \r\nuse of morphological processing to analyze the shapes and\r\nseparation of physical objects imaged. While these \r\noperations are all well-supported in scientific programming\r\nlanguages such as Matlab or scipy, these don't make the\r\nbest tools for visual exploratory data analysis.\r\n\r\nImageJ is a popular image processing tool in the scientific\r\ncommunity, but its morphological image processing functions\r\nare rudimentary and do not support different structuring\r\nelements. To visually explore my data, and better learn\r\nmathematical morphology, I wrote the attached analysis code\r\nbased on the ImageJ API and plugins for the user interface.\r\nImageJ may also be packaged as a convenient library for\r\nuse in other software, and I have explored using this code\r\nfor large scale morphological image processing with a \r\nJava framework such as Hadoop.\r\n\r\n## Contents:\r\n\r\n* makefile\r\n\r\n* plugins.config: instructions for the ImageJ user interface.\r\n\r\n\r\n* Plugins: Dilate_.java, Erode_.java, Hit_Or_Miss.java, \r\nMorph_Close.java, Morph_Open.java, \r\nMorphological_Gradient.java, New_Structuring_Element.java,\r\nOtsu_Threshold.java, Top_Hat.java\r\n\r\n* org/ajdecon/morphology/: a package for image morphology \r\nusing the ImageJ API, containing:\r\n\r\n  * StructElement.java: object to define structuring elements.\r\n  * Morphology.java: utility methods for image morphology.","tagline":"","google":"UA-12576607-1","note":"Don't delete this file! It's used internally to help with page regeneration."}